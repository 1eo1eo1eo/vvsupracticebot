import aiogram
from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.types import Message
from apps import keyboard as kb
from config import options_list
import aiosqlite
import re

router = Router()
rePattern = r'\d+\.\d+\.\d+'

template = """
<b>üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:</b> {compname}
<b>üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> {contacts}
<b>üìò –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:</b> {direction}
<b>üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫—É:</b> {people}
<b>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comment}
<b>üìù –ï—Å—Ç—å –ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç:</b> {ifcontract}
<b>üèõÔ∏è –§–æ—Ä–º–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è:</b> {ownership_form}
"""

rows = None 
cursor = None
current_organization_index = 0

@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.reply('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–æ—Ç –í–í–ì–£ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–∫—Ç–∏–∫–∏.',
                        reply_markup=kb.main)


@router.message(F.text == '–í—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def return_to_main_menu(message: Message):
    await message.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                        reply_markup=kb.main)


@router.message(F.text == '–ü–æ–∏—Å–∫ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π')
async def found_comp_func(message: Message):
    global current_organization_index
    current_organization_index = 0
    await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:',
                        reply_markup=await kb.inline_items())


@router.message(F.text == "–°–ª–µ–¥—É—é—â–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è")
async def next_organization(message: Message):
    global rows, cursor

    if rows is None or cursor is None:
        await message.reply("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    global current_organization_index

    try:
        if current_organization_index < len(rows) - 1:
            current_organization_index += 1
            row = rows[current_organization_index]
            row_dict = {cursor.description[i][0]: value for i, value in enumerate(row)}
            row_dict.pop('direction_code', None)
            formatted_row = template.format(**row_dict)
            await message.reply(formatted_row, parse_mode='html', reply_markup=await kb.next_organization())
        else:
            await message.reply("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –≤ —Å–ø–∏—Å–∫–µ.", reply_markup=kb.main)
    except aiogram.exceptions.TelegramBadRequest:
        await message.reply("–û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ä–∞–∑–º–µ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–µ—Ä–µ—Ö–æ–∂—É –∫ —Å–ª–µ–¥—É—é—â–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.")
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        if current_organization_index < len(rows) - 1:
            current_organization_index += 1
            row = rows[current_organization_index]
            row_dict = {cursor.description[i][0]: value for i, value in enumerate(row)}
            row_dict.pop('direction_code', None)
            formatted_row = template.format(**row_dict)
            await message.reply(formatted_row, parse_mode='html', reply_markup=await kb.next_organization())
        else:
            await message.reply("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –≤ —Å–ø–∏—Å–∫–µ.", reply_markup=kb.main)
for dir in options_list:
    if dir != F.text:
        async def dirNotEquals(message: Message):
            await message.reply("–í—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –Ω–µ—Ç.", reply_markup=kb.main)

for dir in options_list:
    if dir == F.text:
        @router.message(F.text == dir)
        async def all_organizations(message: Message):
            global rows, cursor

            async with aiosqlite.connect("practice_matrix.db") as db:
                matches = re.findall(rePattern, message.text)
                for match in matches:
                    cursor = await db.execute('SELECT * FROM practice_matrix WHERE direction_code LIKE ?', (f'%{match}%',))
                rows = await cursor.fetchall()
                await cursor.close()

                if not rows:
                    await message.reply('–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.', reply_markup=kb.main)
                elif len(rows) == 1:
                    row = rows[0]
                    row_dict = {cursor.description[i][0]: value for i, value in enumerate(row)}
                    row_dict.pop('direction_code', None)
                    formatted_row = template.format(**row_dict)
                    await message.reply(formatted_row, parse_mode='html', reply_markup=kb.main)
                else:
                    current_organization_index = 0
                    row = rows[current_organization_index]
                    row_dict = {cursor.description[i][0]: value for i, value in enumerate(row)}
                    row_dict.pop('direction_code', None)
                    formatted_row = template.format(**row_dict)
                    await message.reply(formatted_row, parse_mode='html', reply_markup=await kb.next_organization())